c
   cout<<"\n--------------------------------------------------------";  
   cout<<"\nProcess\t\tCBT\tWaiting Time\tTurn Around Time";   
  cout<<"\n--------------------------------------------------------\n";    
      for(i=0; i<p; i++)     {      cout<<"P["<<proc[i]<<"]\t\t"<<cbt[i]<<"\t"<<wt[i]<<"\t\t"<<tat[i]<<endl;   
   awt=awt+wt[i]; } 
awt=(awt1.0)/p;

cout<<"\n\nTotal Waiting Time: "<<awt; cout<<"\n\nTotal Turn Around Time: "<<atat<<endl;

return 0; }

======================================================================================================================================= 
RoundRobin #include using namespace std; const int P = 5;   

const int R = 3;

void calculateNeed(int need[P][R], int maxm[P][R],   
                 int allot[P][R]) {     // Calculating Need of each P     for (int i = 0 ; i < P ; i++) 
       for (int j = 0 ; j < R ; j++)     
                    need[i][j] = maxm[i][j] - allot[i][j]; }

bool isSafe(int processes[], int avail[], int maxm[][R],   
          int allot[][R]) {     int need[P][R];      
  calculateNeed(need, maxm, allot);

    bool finish[P] = {0};

    int safeSeq[P];  
      int work[R];   
  for (int i = 0; i < R ; i++)     
    work[i] = avail[i];

    int count = 0;     while (count < P)    
 {           bool found = false;     
    for (int p = 0; p < P; p++)         {                   if (finish[p] == 0)   
         {                          int j;                 for (j = 0; j < R; j++)                  
   if (need[p][j] > work[j])                     
    break;

                if (j == R)              
   {                     for (int k = 0 ; k < R ; k++)                   
      work[k] += allot[p][k];                                   
    safeSeq[count++] = p;                       
                  finish[p] = 1;                     
   found = true;                 }             }         }   
      if (found == false)         {           
  cout << "System is not in safe state";         
    return false;         }     }
    cout << "System is in safe state.\nSafe"          " sequence is: ";   
  for (int i = 0; i < P ; i++)      
   cout << safeSeq[i] << " ";     
   return true; }   